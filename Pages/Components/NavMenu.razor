@inject NavServices navService
@inject IJSRuntime JS
<nav @attributes="AdditionalAttributes" class="fixed top-0 z-[100] mx-0 mt-0 w-full font-sans  shadow dark:shadow-2xl">
    <div class="relative mx-auto flex h-[73px] w-full items-center justify-start border-b-[1px] bg-opacity-70 border-gray-200/60 bg-white pb-4 pt-4 duration-300 motion-reduce:transition-none dark:border-neutral-800 dark:bg-[#161617] lg:justify-between lg:!bg-opacity-70">
        <div class="fixed inset-0 z-[-1] h-[inherit] w-full lg:backdrop-blur-xl"></div>
        <NavLink href="/">
            <h3 class="z-[1001] mx-8 text-xl font-semibold text-gray-800 duration-300 motion-reduce:transition-none dark:text-white">
                Abkhan
                <span class="bg-gradient-to-r from-[#6310ff] to-[#1491ff] box-decoration-clone bg-clip-text text-fill-transparent dark:from-[#a2facf] dark:to-[#64acff]">.</span>
            </h3>
        </NavLink>
      
        <div class="mr-auto hidden gap-2 lg:flex">
            @foreach (var item in nav.LeftItems)
            {
               <NavLink href="@item.Href" class="relative rounded-md p-1 transition-all hover:bg-black/10 hover:text-neutral-800 dark:text-white dark:hover:bg-white/10 dark:hover:text-neutral-200 sm:px-3 sm:py-2">
                   @item.Title
                    @if (!string.IsNullOrEmpty(@item.Target) && (@item.Target == "_blank" || @item.Target == "_external"))
                    {
                        <svg aria-hidden="true" class="ml-1 inline-block fill-black align-top opacity-50 dark:fill-white"  fill="currentColor" height="7" viewBox="0 0 6 6" width="7">
                            <path d="M1.25215 5.54731L0.622742 4.9179L3.78169 1.75597H1.3834L1.38936 0.890915H5.27615V4.78069H4.40513L4.41109 2.38538L1.25215 5.54731Z" fill="var(--accents-3)" />
                        </svg>
                    }
                </NavLink>
            }
        </div>
      @* <ButtonPrimary Href="/" Text="Contact me" /> *@
      
      <div className=" ml-auto hidden gap-2 mx-4 lg:flex">
            
            <button @onclick="ToggleDarkMode" class=" text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2 mx-4"  aria-label="Appearance mode toggle button" type="button">
            @if(isDarkMode)
            {
                <svg id="theme-toggle-light-icon" class="w-6 h-6  hover:text-gray-700 dark:text-white dark:hover:text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
                
            }else{
                 <svg id="theme-toggle-dark-icon"class="w-6 h-6  hover:text-gray-700 dark:text-white dark:hover:text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>

            }
            </button>
         
        </div>

        
     
    </div>
</nav>
<script>
    window.toggleDarkMode = (isDarkMode) => {
        if (isDarkMode) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    };
</script>

@code {
    [Parameter] public Dictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter] public string Mode { get; set; } = "dark";
     public bool IsActive { get; set; }=true;

    private NavigationModel nav;
    
    protected override void OnInitialized()
    {
        nav = navService.GetNavigation();
    }    
   private bool isDarkMode = true; // Initialize to true if dark mode is enabled by default

    // Method to toggle dark mode
    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        await JS.InvokeVoidAsync("toggleDarkMode", isDarkMode);
    }
}